name: Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

defaults:
  run:
    # necessary for windows
    shell: bash

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        # a list of all the targets
        include:
          - TARGET: x86_64-unknown-linux-gnu
            OS: ubuntu-20.04
            LIB_NAME: libaiken_jna_wrapper.so
            TARGET_NAME: linux-x86-64_libaiken_jna_wrapper.so
#          - TARGET: aarch64-unknown-linux-gnu
#            OS: ubuntu-20.04
#            LIB_NAME: libaiken_jna_wrapper.so
#            TARGET_NAME: linux-aarch64_libaiken_jna_wrapper.so
          - TARGET: x86_64-apple-darwin
            OS: macos-latest
            LIB_NAME: libaiken_jna_wrapper.dylib
            TARGET_NAME: darwin-x86-64_libaiken_jna_wrapper.dylib
          - TARGET: aarch64-apple-darwin
            OS: macos-latest
            LIB_NAME: libaiken_jna_wrapper.dylib
            TARGET_NAME: darwin-aarch64_libaiken_jna_wrapper.dylib
          - TARGET: x86_64-pc-windows-msvc
            OS: windows-latest
            LIB_NAME: aiken_jna_wrapper.dll
            TARGET_NAME: windows-x86-64_aiken_jna_wrapper.dll
          - TARGET: aarch64-pc-windows-msvc
            OS: windows-latest
            LIB_NAME: aiken_jna_wrapper.dll
            TARGET_NAME: windows-aarch64_aiken_jna_wrapper.dll
#    needs: test
    runs-on: ${{ matrix.OS }}
    env:
      NAME: libaiken_jna_wrapper
      TARGET: ${{ matrix.TARGET }}
      OS: ${{ matrix.OS }}
      LIB_NAME: ${{ matrix.LIB_NAME }}
      TARGET_NAME: ${{ matrix.TARGET_NAME }}
    steps:
      - uses: actions/checkout@v2
      - name: Cargo cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ./target
          key: build-cargo-registry-${{matrix.TARGET}}
      - name: List
        run: find ./
      - name: Install and configure dependencies
        run: |
          # dependencies are only needed on ubuntu as that's the only place where
          # we make cross-compilation
          if [[ $OS =~ ^ubuntu.*$ ]]; then
            sudo apt-get update
            sudo apt-get install -qq crossbuild-essential-arm64 crossbuild-essential-armhf libssl-dev
          fi

          # some additional configuration for cross-compilation on linux
          cat >>~/.cargo/config <<EOF
          [target.aarch64-unknown-linux-gnu]
          linker = "aarch64-linux-gnu-gcc"
          [target.aarch64-unknown-linux-musl]
          linker = "aarch64-linux-gnu-gcc"
          [target.armv7-unknown-linux-gnueabihf]
          linker = "arm-linux-gnueabihf-gcc"
          [target.armv7-unknown-linux-musleabihf]
          linker = "arm-linux-gnueabihf-gcc"
          [target.arm-unknown-linux-gnueabihf]
          linker = "arm-linux-gnueabihf-gcc"
          [target.arm-unknown-linux-musleabihf]
          linker = "arm-linux-gnueabihf-gcc"
          EOF
      - name: Install rust target
        run: rustup target add $TARGET
      - name: Run build
        run: cargo build --release --verbose --target $TARGET
      - name: List target
        run: find ./target
      - name: Copy artifact
        run: |
          mkdir -p ./artifacts
          
          if [[ $GITHUB_REF_TYPE =~ ^tag$ ]]; then
            TAG=$GITHUB_REF_NAME
          else
            TAG=$GITHUB_SHA
          fi
          mv ./target/$TARGET/release/$LIB_NAME ./artifacts/$TARGET_NAME
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: result-${{ matrix.TARGET_NAME }}
          path: |
            ./artifacts

  # deploys to github releases on tag
  deploy:
    if: startsWith(github.ref, 'refs/tags/')
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: result
          path: artifacts
      - name: List
        run: find ./artifacts
      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: ./artifacts/*.*
